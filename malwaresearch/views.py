from django.shortcuts import render
from asyncio.windows_events import NULL
from multiprocessing import context
from textwrap import indent
from django.shortcuts import render
from django.http import HttpResponse
from malwarebazaar.api import Bazaar
from flatten_json import flatten
from django.contrib.auth.decorators import login_required
import json


@login_required(login_url='/')
def searchView(request):
        # info = []
        query_status = ''
        ilegal_query = ''
        sha256_hash = ''
        response = ''
        json_str = ''
        resp = ''
        file_name = ''
        file_size = ''
        file_type = ''
        first_seen = ''
        last_seen = ''
        reporter = ''
        signature = ''
        imphash = ''
        ssdeep = ''
        tags = ''
        intelligence = ''
        delivery_method = ''
        vendor_intel = ''
        dic_flattened = ''
        data_0_yara_rules_0_rule_name = ''
        data_0_file_information_0_context =''
        data_0_file_information_0_value = ''

        if request.method == "POST":
            bazaar = Bazaar("") # MALWARE BAAZAR API KEY
            userinput = request.POST['search']
            filehash = userinput
            response = bazaar.query_hash(filehash)
            json_str = json.dumps(response, indent=4)
            resp = json.loads(json_str)
            dic_flattened = flatten(resp)

            query_status = resp['query_status']
            if query_status == 'ok':
                sha256_hash = resp['data'][0]['sha256_hash']
                file_name = resp['data'][0]['file_name']
                file_size = resp['data'][0]['file_size']
                file_type = resp['data'][0]['file_type']
                first_seen = resp['data'][0]['first_seen']
                last_seen = resp['data'][0]['last_seen']
                reporter = resp['data'][0]['reporter']
                signature = resp['data'][0]['signature']
                imphash = resp['data'][0]['imphash']
                ssdeep = resp['data'][0]['ssdeep']
                tags = resp['data'][0]['tags']
                intelligence = resp['data'][0]['intelligence']['clamav']
                delivery_method = resp['data'][0]['delivery_method']
                vendor_intel = resp['data'][0]['vendor_intel']

                if 'data_0_yara_rules_0_rule_name' in dic_flattened:
                    data_0_yara_rules_0_rule_name = dic_flattened['data_0_yara_rules_0_rule_name']
                else:
                    data_0_yara_rules_0_rule_name = 'None'

                if 'URLhaus' in dic_flattened.values():
                    data_0_file_information_0_context = dic_flattened['data_0_file_information_0_context']
                    data_0_file_information_0_value = dic_flattened['data_0_file_information_0_value']
                else:
                    data_0_file_information_0_context = 'Not Available'

                
                for vendor in vendor_intel:
                        print(vendor)

            else:
                  ilegal_query = query_status    
        else:
            pass
        context = {
                'resp': resp,
                'query_status': query_status,
                'ilegal_query': ilegal_query,
                'sha256_hash': sha256_hash,
                'file_name': file_name,
                'file_size':file_size,
                'file_type': file_type, 
                'reporter': reporter,
                'signature': signature,
                'first_seen': first_seen,
                'last_seen': last_seen,
                'imphash': imphash,
                'ssdeep': ssdeep,
                'tags': tags,
                'intelligence': intelligence,
                'delivery_method': delivery_method,
                'vendor_intel': vendor_intel,
                'dic_flattened': dic_flattened,
                'data_0_yara_rules_0_rule_name': data_0_yara_rules_0_rule_name,
                'urlhaus': data_0_file_information_0_context,
                'urlhaus_value': data_0_file_information_0_value,

                }
        return render(request, 'malwaresearch/malware-search.html', context )
